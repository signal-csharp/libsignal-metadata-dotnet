// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: UnidentifiedDelivery.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace libsignalmetadata.protobuf {

  /// <summary>Holder for reflection information generated from UnidentifiedDelivery.proto</summary>
  public static partial class UnidentifiedDeliveryReflection {

    #region Descriptor
    /// <summary>File descriptor for UnidentifiedDelivery.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UnidentifiedDeliveryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpVbmlkZW50aWZpZWREZWxpdmVyeS5wcm90bxIGc2lnbmFsImMKEVNlcnZl",
            "ckNlcnRpZmljYXRlEhMKC2NlcnRpZmljYXRlGAEgASgMEhEKCXNpZ25hdHVy",
            "ZRgCIAEoDBomCgtDZXJ0aWZpY2F0ZRIKCgJpZBgBIAEoDRILCgNrZXkYAiAB",
            "KAwi2gEKEVNlbmRlckNlcnRpZmljYXRlEhMKC2NlcnRpZmljYXRlGAEgASgM",
            "EhEKCXNpZ25hdHVyZRgCIAEoDBqcAQoLQ2VydGlmaWNhdGUSEgoKc2VuZGVy",
            "RTE2NBgBIAEoCRISCgpzZW5kZXJVdWlkGAYgASgJEhQKDHNlbmRlckRldmlj",
            "ZRgCIAEoDRIPCgdleHBpcmVzGAMgASgGEhMKC2lkZW50aXR5S2V5GAQgASgM",
            "EikKBnNpZ25lchgFIAEoCzIZLnNpZ25hbC5TZXJ2ZXJDZXJ0aWZpY2F0ZSKh",
            "AgoZVW5pZGVudGlmaWVkU2VuZGVyTWVzc2FnZRIXCg9lcGhlbWVyYWxQdWJs",
            "aWMYASABKAwSFwoPZW5jcnlwdGVkU3RhdGljGAIgASgMEhgKEGVuY3J5cHRl",
            "ZE1lc3NhZ2UYAyABKAwatwEKB01lc3NhZ2USPAoEdHlwZRgBIAEoDjIuLnNp",
            "Z25hbC5VbmlkZW50aWZpZWRTZW5kZXJNZXNzYWdlLk1lc3NhZ2UuVHlwZRI0",
            "ChFzZW5kZXJDZXJ0aWZpY2F0ZRgCIAEoCzIZLnNpZ25hbC5TZW5kZXJDZXJ0",
            "aWZpY2F0ZRIPCgdjb250ZW50GAMgASgMIicKBFR5cGUSEgoOUFJFS0VZX01F",
            "U1NBR0UQARILCgdNRVNTQUdFEAJCHaoCGmxpYnNpZ25hbG1ldGFkYXRhLnBy",
            "b3RvYnVm"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalmetadata.protobuf.ServerCertificate), global::libsignalmetadata.protobuf.ServerCertificate.Parser, new[]{ "Certificate", "Signature" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignalmetadata.protobuf.ServerCertificate.Types.Certificate), global::libsignalmetadata.protobuf.ServerCertificate.Types.Certificate.Parser, new[]{ "Id", "Key" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalmetadata.protobuf.SenderCertificate), global::libsignalmetadata.protobuf.SenderCertificate.Parser, new[]{ "Certificate", "Signature" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignalmetadata.protobuf.SenderCertificate.Types.Certificate), global::libsignalmetadata.protobuf.SenderCertificate.Types.Certificate.Parser, new[]{ "SenderE164", "SenderUuid", "SenderDevice", "Expires", "IdentityKey", "Signer" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalmetadata.protobuf.UnidentifiedSenderMessage), global::libsignalmetadata.protobuf.UnidentifiedSenderMessage.Parser, new[]{ "EphemeralPublic", "EncryptedStatic", "EncryptedMessage" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignalmetadata.protobuf.UnidentifiedSenderMessage.Types.Message), global::libsignalmetadata.protobuf.UnidentifiedSenderMessage.Types.Message.Parser, new[]{ "Type", "SenderCertificate", "Content" }, null, new[]{ typeof(global::libsignalmetadata.protobuf.UnidentifiedSenderMessage.Types.Message.Types.Type) }, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ServerCertificate : pb::IMessage<ServerCertificate> {
    private static readonly pb::MessageParser<ServerCertificate> _parser = new pb::MessageParser<ServerCertificate>(() => new ServerCertificate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerCertificate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalmetadata.protobuf.UnidentifiedDeliveryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerCertificate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerCertificate(ServerCertificate other) : this() {
      certificate_ = other.certificate_;
      signature_ = other.signature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerCertificate Clone() {
      return new ServerCertificate(this);
    }

    /// <summary>Field number for the "certificate" field.</summary>
    public const int CertificateFieldNumber = 1;
    private readonly static pb::ByteString CertificateDefaultValue = pb::ByteString.Empty;

    private pb::ByteString certificate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Certificate {
      get { return certificate_ ?? CertificateDefaultValue; }
      set {
        certificate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "certificate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCertificate {
      get { return certificate_ != null; }
    }
    /// <summary>Clears the value of the "certificate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCertificate() {
      certificate_ = null;
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    private readonly static pb::ByteString SignatureDefaultValue = pb::ByteString.Empty;

    private pb::ByteString signature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_ ?? SignatureDefaultValue; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "signature" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSignature {
      get { return signature_ != null; }
    }
    /// <summary>Clears the value of the "signature" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSignature() {
      signature_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerCertificate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerCertificate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Certificate != other.Certificate) return false;
      if (Signature != other.Signature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCertificate) hash ^= Certificate.GetHashCode();
      if (HasSignature) hash ^= Signature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCertificate) {
        output.WriteRawTag(10);
        output.WriteBytes(Certificate);
      }
      if (HasSignature) {
        output.WriteRawTag(18);
        output.WriteBytes(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCertificate) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Certificate);
      }
      if (HasSignature) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerCertificate other) {
      if (other == null) {
        return;
      }
      if (other.HasCertificate) {
        Certificate = other.Certificate;
      }
      if (other.HasSignature) {
        Signature = other.Signature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Certificate = input.ReadBytes();
            break;
          }
          case 18: {
            Signature = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ServerCertificate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Certificate : pb::IMessage<Certificate> {
        private static readonly pb::MessageParser<Certificate> _parser = new pb::MessageParser<Certificate>(() => new Certificate());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Certificate> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalmetadata.protobuf.ServerCertificate.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Certificate() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Certificate(Certificate other) : this() {
          _hasBits0 = other._hasBits0;
          id_ = other.id_;
          key_ = other.key_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Certificate Clone() {
          return new Certificate(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private readonly static uint IdDefaultValue = 0;

        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            id_ = value;
          }
        }
        /// <summary>Gets whether the "id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 2;
        private readonly static pb::ByteString KeyDefaultValue = pb::ByteString.Empty;

        private pb::ByteString key_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Key {
          get { return key_ ?? KeyDefaultValue; }
          set {
            key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "key" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasKey {
          get { return key_ != null; }
        }
        /// <summary>Clears the value of the "key" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKey() {
          key_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Certificate);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Certificate other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Key != other.Key) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasId) hash ^= Id.GetHashCode();
          if (HasKey) hash ^= Key.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasId) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (HasKey) {
            output.WriteRawTag(18);
            output.WriteBytes(Key);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (HasKey) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Certificate other) {
          if (other == null) {
            return;
          }
          if (other.HasId) {
            Id = other.Id;
          }
          if (other.HasKey) {
            Key = other.Key;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 18: {
                Key = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class SenderCertificate : pb::IMessage<SenderCertificate> {
    private static readonly pb::MessageParser<SenderCertificate> _parser = new pb::MessageParser<SenderCertificate>(() => new SenderCertificate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SenderCertificate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalmetadata.protobuf.UnidentifiedDeliveryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SenderCertificate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SenderCertificate(SenderCertificate other) : this() {
      certificate_ = other.certificate_;
      signature_ = other.signature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SenderCertificate Clone() {
      return new SenderCertificate(this);
    }

    /// <summary>Field number for the "certificate" field.</summary>
    public const int CertificateFieldNumber = 1;
    private readonly static pb::ByteString CertificateDefaultValue = pb::ByteString.Empty;

    private pb::ByteString certificate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Certificate {
      get { return certificate_ ?? CertificateDefaultValue; }
      set {
        certificate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "certificate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCertificate {
      get { return certificate_ != null; }
    }
    /// <summary>Clears the value of the "certificate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCertificate() {
      certificate_ = null;
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    private readonly static pb::ByteString SignatureDefaultValue = pb::ByteString.Empty;

    private pb::ByteString signature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_ ?? SignatureDefaultValue; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "signature" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSignature {
      get { return signature_ != null; }
    }
    /// <summary>Clears the value of the "signature" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSignature() {
      signature_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SenderCertificate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SenderCertificate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Certificate != other.Certificate) return false;
      if (Signature != other.Signature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCertificate) hash ^= Certificate.GetHashCode();
      if (HasSignature) hash ^= Signature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCertificate) {
        output.WriteRawTag(10);
        output.WriteBytes(Certificate);
      }
      if (HasSignature) {
        output.WriteRawTag(18);
        output.WriteBytes(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCertificate) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Certificate);
      }
      if (HasSignature) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SenderCertificate other) {
      if (other == null) {
        return;
      }
      if (other.HasCertificate) {
        Certificate = other.Certificate;
      }
      if (other.HasSignature) {
        Signature = other.Signature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Certificate = input.ReadBytes();
            break;
          }
          case 18: {
            Signature = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SenderCertificate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Certificate : pb::IMessage<Certificate> {
        private static readonly pb::MessageParser<Certificate> _parser = new pb::MessageParser<Certificate>(() => new Certificate());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Certificate> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalmetadata.protobuf.SenderCertificate.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Certificate() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Certificate(Certificate other) : this() {
          _hasBits0 = other._hasBits0;
          senderE164_ = other.senderE164_;
          senderUuid_ = other.senderUuid_;
          senderDevice_ = other.senderDevice_;
          expires_ = other.expires_;
          identityKey_ = other.identityKey_;
          signer_ = other.signer_ != null ? other.signer_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Certificate Clone() {
          return new Certificate(this);
        }

        /// <summary>Field number for the "senderE164" field.</summary>
        public const int SenderE164FieldNumber = 1;
        private readonly static string SenderE164DefaultValue = "";

        private string senderE164_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SenderE164 {
          get { return senderE164_ ?? SenderE164DefaultValue; }
          set {
            senderE164_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "senderE164" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSenderE164 {
          get { return senderE164_ != null; }
        }
        /// <summary>Clears the value of the "senderE164" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSenderE164() {
          senderE164_ = null;
        }

        /// <summary>Field number for the "senderUuid" field.</summary>
        public const int SenderUuidFieldNumber = 6;
        private readonly static string SenderUuidDefaultValue = "";

        private string senderUuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SenderUuid {
          get { return senderUuid_ ?? SenderUuidDefaultValue; }
          set {
            senderUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "senderUuid" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSenderUuid {
          get { return senderUuid_ != null; }
        }
        /// <summary>Clears the value of the "senderUuid" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSenderUuid() {
          senderUuid_ = null;
        }

        /// <summary>Field number for the "senderDevice" field.</summary>
        public const int SenderDeviceFieldNumber = 2;
        private readonly static uint SenderDeviceDefaultValue = 0;

        private uint senderDevice_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SenderDevice {
          get { if ((_hasBits0 & 1) != 0) { return senderDevice_; } else { return SenderDeviceDefaultValue; } }
          set {
            _hasBits0 |= 1;
            senderDevice_ = value;
          }
        }
        /// <summary>Gets whether the "senderDevice" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSenderDevice {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "senderDevice" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSenderDevice() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "expires" field.</summary>
        public const int ExpiresFieldNumber = 3;
        private readonly static ulong ExpiresDefaultValue = 0UL;

        private ulong expires_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Expires {
          get { if ((_hasBits0 & 2) != 0) { return expires_; } else { return ExpiresDefaultValue; } }
          set {
            _hasBits0 |= 2;
            expires_ = value;
          }
        }
        /// <summary>Gets whether the "expires" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasExpires {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "expires" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearExpires() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "identityKey" field.</summary>
        public const int IdentityKeyFieldNumber = 4;
        private readonly static pb::ByteString IdentityKeyDefaultValue = pb::ByteString.Empty;

        private pb::ByteString identityKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString IdentityKey {
          get { return identityKey_ ?? IdentityKeyDefaultValue; }
          set {
            identityKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "identityKey" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIdentityKey {
          get { return identityKey_ != null; }
        }
        /// <summary>Clears the value of the "identityKey" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIdentityKey() {
          identityKey_ = null;
        }

        /// <summary>Field number for the "signer" field.</summary>
        public const int SignerFieldNumber = 5;
        private global::libsignalmetadata.protobuf.ServerCertificate signer_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalmetadata.protobuf.ServerCertificate Signer {
          get { return signer_; }
          set {
            signer_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Certificate);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Certificate other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (SenderE164 != other.SenderE164) return false;
          if (SenderUuid != other.SenderUuid) return false;
          if (SenderDevice != other.SenderDevice) return false;
          if (Expires != other.Expires) return false;
          if (IdentityKey != other.IdentityKey) return false;
          if (!object.Equals(Signer, other.Signer)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasSenderE164) hash ^= SenderE164.GetHashCode();
          if (HasSenderUuid) hash ^= SenderUuid.GetHashCode();
          if (HasSenderDevice) hash ^= SenderDevice.GetHashCode();
          if (HasExpires) hash ^= Expires.GetHashCode();
          if (HasIdentityKey) hash ^= IdentityKey.GetHashCode();
          if (signer_ != null) hash ^= Signer.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasSenderE164) {
            output.WriteRawTag(10);
            output.WriteString(SenderE164);
          }
          if (HasSenderDevice) {
            output.WriteRawTag(16);
            output.WriteUInt32(SenderDevice);
          }
          if (HasExpires) {
            output.WriteRawTag(25);
            output.WriteFixed64(Expires);
          }
          if (HasIdentityKey) {
            output.WriteRawTag(34);
            output.WriteBytes(IdentityKey);
          }
          if (signer_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(Signer);
          }
          if (HasSenderUuid) {
            output.WriteRawTag(50);
            output.WriteString(SenderUuid);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasSenderE164) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderE164);
          }
          if (HasSenderUuid) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderUuid);
          }
          if (HasSenderDevice) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SenderDevice);
          }
          if (HasExpires) {
            size += 1 + 8;
          }
          if (HasIdentityKey) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(IdentityKey);
          }
          if (signer_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Signer);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Certificate other) {
          if (other == null) {
            return;
          }
          if (other.HasSenderE164) {
            SenderE164 = other.SenderE164;
          }
          if (other.HasSenderUuid) {
            SenderUuid = other.SenderUuid;
          }
          if (other.HasSenderDevice) {
            SenderDevice = other.SenderDevice;
          }
          if (other.HasExpires) {
            Expires = other.Expires;
          }
          if (other.HasIdentityKey) {
            IdentityKey = other.IdentityKey;
          }
          if (other.signer_ != null) {
            if (signer_ == null) {
              Signer = new global::libsignalmetadata.protobuf.ServerCertificate();
            }
            Signer.MergeFrom(other.Signer);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                SenderE164 = input.ReadString();
                break;
              }
              case 16: {
                SenderDevice = input.ReadUInt32();
                break;
              }
              case 25: {
                Expires = input.ReadFixed64();
                break;
              }
              case 34: {
                IdentityKey = input.ReadBytes();
                break;
              }
              case 42: {
                if (signer_ == null) {
                  Signer = new global::libsignalmetadata.protobuf.ServerCertificate();
                }
                input.ReadMessage(Signer);
                break;
              }
              case 50: {
                SenderUuid = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class UnidentifiedSenderMessage : pb::IMessage<UnidentifiedSenderMessage> {
    private static readonly pb::MessageParser<UnidentifiedSenderMessage> _parser = new pb::MessageParser<UnidentifiedSenderMessage>(() => new UnidentifiedSenderMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnidentifiedSenderMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalmetadata.protobuf.UnidentifiedDeliveryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnidentifiedSenderMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnidentifiedSenderMessage(UnidentifiedSenderMessage other) : this() {
      ephemeralPublic_ = other.ephemeralPublic_;
      encryptedStatic_ = other.encryptedStatic_;
      encryptedMessage_ = other.encryptedMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnidentifiedSenderMessage Clone() {
      return new UnidentifiedSenderMessage(this);
    }

    /// <summary>Field number for the "ephemeralPublic" field.</summary>
    public const int EphemeralPublicFieldNumber = 1;
    private readonly static pb::ByteString EphemeralPublicDefaultValue = pb::ByteString.Empty;

    private pb::ByteString ephemeralPublic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EphemeralPublic {
      get { return ephemeralPublic_ ?? EphemeralPublicDefaultValue; }
      set {
        ephemeralPublic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ephemeralPublic" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEphemeralPublic {
      get { return ephemeralPublic_ != null; }
    }
    /// <summary>Clears the value of the "ephemeralPublic" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEphemeralPublic() {
      ephemeralPublic_ = null;
    }

    /// <summary>Field number for the "encryptedStatic" field.</summary>
    public const int EncryptedStaticFieldNumber = 2;
    private readonly static pb::ByteString EncryptedStaticDefaultValue = pb::ByteString.Empty;

    private pb::ByteString encryptedStatic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedStatic {
      get { return encryptedStatic_ ?? EncryptedStaticDefaultValue; }
      set {
        encryptedStatic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "encryptedStatic" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEncryptedStatic {
      get { return encryptedStatic_ != null; }
    }
    /// <summary>Clears the value of the "encryptedStatic" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEncryptedStatic() {
      encryptedStatic_ = null;
    }

    /// <summary>Field number for the "encryptedMessage" field.</summary>
    public const int EncryptedMessageFieldNumber = 3;
    private readonly static pb::ByteString EncryptedMessageDefaultValue = pb::ByteString.Empty;

    private pb::ByteString encryptedMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedMessage {
      get { return encryptedMessage_ ?? EncryptedMessageDefaultValue; }
      set {
        encryptedMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "encryptedMessage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEncryptedMessage {
      get { return encryptedMessage_ != null; }
    }
    /// <summary>Clears the value of the "encryptedMessage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEncryptedMessage() {
      encryptedMessage_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnidentifiedSenderMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnidentifiedSenderMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EphemeralPublic != other.EphemeralPublic) return false;
      if (EncryptedStatic != other.EncryptedStatic) return false;
      if (EncryptedMessage != other.EncryptedMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEphemeralPublic) hash ^= EphemeralPublic.GetHashCode();
      if (HasEncryptedStatic) hash ^= EncryptedStatic.GetHashCode();
      if (HasEncryptedMessage) hash ^= EncryptedMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasEphemeralPublic) {
        output.WriteRawTag(10);
        output.WriteBytes(EphemeralPublic);
      }
      if (HasEncryptedStatic) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedStatic);
      }
      if (HasEncryptedMessage) {
        output.WriteRawTag(26);
        output.WriteBytes(EncryptedMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEphemeralPublic) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EphemeralPublic);
      }
      if (HasEncryptedStatic) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedStatic);
      }
      if (HasEncryptedMessage) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnidentifiedSenderMessage other) {
      if (other == null) {
        return;
      }
      if (other.HasEphemeralPublic) {
        EphemeralPublic = other.EphemeralPublic;
      }
      if (other.HasEncryptedStatic) {
        EncryptedStatic = other.EncryptedStatic;
      }
      if (other.HasEncryptedMessage) {
        EncryptedMessage = other.EncryptedMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EphemeralPublic = input.ReadBytes();
            break;
          }
          case 18: {
            EncryptedStatic = input.ReadBytes();
            break;
          }
          case 26: {
            EncryptedMessage = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UnidentifiedSenderMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Message : pb::IMessage<Message> {
        private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Message> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalmetadata.protobuf.UnidentifiedSenderMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Message() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Message(Message other) : this() {
          _hasBits0 = other._hasBits0;
          type_ = other.type_;
          senderCertificate_ = other.senderCertificate_ != null ? other.senderCertificate_.Clone() : null;
          content_ = other.content_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Message Clone() {
          return new Message(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private readonly static global::libsignalmetadata.protobuf.UnidentifiedSenderMessage.Types.Message.Types.Type TypeDefaultValue = global::libsignalmetadata.protobuf.UnidentifiedSenderMessage.Types.Message.Types.Type.PrekeyMessage;

        private global::libsignalmetadata.protobuf.UnidentifiedSenderMessage.Types.Message.Types.Type type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalmetadata.protobuf.UnidentifiedSenderMessage.Types.Message.Types.Type Type {
          get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
          set {
            _hasBits0 |= 1;
            type_ = value;
          }
        }
        /// <summary>Gets whether the "type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasType {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "senderCertificate" field.</summary>
        public const int SenderCertificateFieldNumber = 2;
        private global::libsignalmetadata.protobuf.SenderCertificate senderCertificate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalmetadata.protobuf.SenderCertificate SenderCertificate {
          get { return senderCertificate_; }
          set {
            senderCertificate_ = value;
          }
        }

        /// <summary>Field number for the "content" field.</summary>
        public const int ContentFieldNumber = 3;
        private readonly static pb::ByteString ContentDefaultValue = pb::ByteString.Empty;

        private pb::ByteString content_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Content {
          get { return content_ ?? ContentDefaultValue; }
          set {
            content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "content" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasContent {
          get { return content_ != null; }
        }
        /// <summary>Clears the value of the "content" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearContent() {
          content_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Message);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Message other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (!object.Equals(SenderCertificate, other.SenderCertificate)) return false;
          if (Content != other.Content) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasType) hash ^= Type.GetHashCode();
          if (senderCertificate_ != null) hash ^= SenderCertificate.GetHashCode();
          if (HasContent) hash ^= Content.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasType) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (senderCertificate_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(SenderCertificate);
          }
          if (HasContent) {
            output.WriteRawTag(26);
            output.WriteBytes(Content);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (senderCertificate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SenderCertificate);
          }
          if (HasContent) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Message other) {
          if (other == null) {
            return;
          }
          if (other.HasType) {
            Type = other.Type;
          }
          if (other.senderCertificate_ != null) {
            if (senderCertificate_ == null) {
              SenderCertificate = new global::libsignalmetadata.protobuf.SenderCertificate();
            }
            SenderCertificate.MergeFrom(other.SenderCertificate);
          }
          if (other.HasContent) {
            Content = other.Content;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Type = (global::libsignalmetadata.protobuf.UnidentifiedSenderMessage.Types.Message.Types.Type) input.ReadEnum();
                break;
              }
              case 18: {
                if (senderCertificate_ == null) {
                  SenderCertificate = new global::libsignalmetadata.protobuf.SenderCertificate();
                }
                input.ReadMessage(SenderCertificate);
                break;
              }
              case 26: {
                Content = input.ReadBytes();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Message message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Type {
            [pbr::OriginalName("PREKEY_MESSAGE")] PrekeyMessage = 1,
            [pbr::OriginalName("MESSAGE")] Message = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
